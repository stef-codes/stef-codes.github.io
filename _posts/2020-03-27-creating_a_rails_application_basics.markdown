---
layout: post
title:      "Creating a Rails Application (Basics)"
date:       2020-03-27 20:55:24 +0000
permalink:  creating_a_rails_application_basics
---


Starting something new is always a daunting task. Lucky for us, we have the internet and many resources that allow us to find the answers we’re looking for. Books are a common source of knowledge for a variety of subjects. However, when you refer to a book you don’t typically recite a full chapter. You have pieces from that book you remember or want to remember called quotes. 

The Rails Application I created allows you to:

1. Save Quotes
2. View Books Created By Other Users
3. View Quotes associated with books already added to the list.

## The Process

It’s very important to have a plan going into your Rails project. My approach is to think big and build small. I don’t want to have to refactor basic logic, because of a failure to plan.

I have three major pieces of my project: 

1. Quotes
2. Users
3. Books


I drew an ERD(Entity Relationship Diagram) to model the pieces of my project.

There is a many to many relationship of Users to Books. That relationship is handled through Quotes. This diagram let’s me know what my database needs to look like in terms of tables and columns. Using that diagram and a few other steps I was able to create the schema. 

This schema was generated using rails generators. I prefer the resource generator, because rails creates the database migrations, controllers, models, and routes for each object.

I used the Scaffold generator, which is a very powerful generator. The Users object was created using Devise for handling Users authentication.This is a link the information about the gem and it’s capabilities. For this project Devise was mostly used to handle user sign in, login, log out, and OmniAuth sign in to give users the ability to sign in with Github.
Now that you got to see how I created the structure for my project. I’ll go back into the specifics. My project follows an MVC Framework. To best explain my project I’m going to go in the order of Model, Controller, and View.

## The Project

### Model

Models are part of the foundation of a Rails Application. Models outline what objects are used in the project and how those objects interact with the other elements of the application.
All models from my project shown below have two basic parts: relationships and validations. It’s important to setup the relationships in your models. Because Active Record reads those relationships and creates associations that can be used in the controllers and views. The Rails Guides are the best resource to understand associations and validations. I’ll give an example of some used in my project.

**1. User Model**

**Relationships:** This first shows the relationship the User object has to Books and Quotes. User has two relationships 1. User has many Quotes 2. User has many Books through Quotes. This is called a has many through relationship.

**Validations:** The validations for my user ensure that you enter an email address and password. The email address needs to be unique, because that’s what I’m using to identify a user in my project. The email address is also displayed once you login.

**Other:** Omniauth is used to allow users to login with Github. The code generated by devise is below the validations. There are many applications for devise. The features I didn’t use in my project are commented out. But, when I come back to build out more features, I wanted those as a reminder. Then, I can uncomment the feature I want to use.

**2. Book Model**

**Relationships:** The Book model has two relationships 1. Book has many Quotes 2. Book has many Users through Quotes. This is another has many through relationship, similar to the User model above.

**Validations:** I’m checking that each Book has a name or title and that title is only entered once. All users will be able to see the full list of books. So, having books with the same name wouldn’t be helpful. It would cause some confusion along with technical problems.

**Other:** accepts_nested_attributes_for is an Active Record class method. This allows me to access quotes associated with each book. For all capabilities see the Rails Guide associated with that method.

**3. Quote Model**

**Relationships:** The Book model has one kind of relationship belongs_to for Book and User. Quotes are created by users and come from books. In this application you enter a new quote along with a book.

**Validations:** Quotes must have content, in fact that’s their only unique attribute in the table. I’m checking that users enter a quote and that the quote is at least 10 characters long.

**Other:** I wanted to be able to search through my quotes for a specific quote. To accomplish that I created a scope method. This scope method takes in an argument in this case search term and looks through content or the quote for anything matching that term in all my quotes. This scope method uses Active Record Query Interface to search for quotes

## Controller
Controllers provide the direction and are the link between the Models and Views. They look to the Models for what exists and how. Then the Controller creates directions along with where to send the directions through actions.


## View
The views with the .html.erb suffix allow us to write code using html and Embedded RuBy(erb) to create web pages that can be shown in the browser.

**Conclusion**
This post took you through the basics of creating a rails application, using my project as an example. There are many missing pieces, as this project took me days to create. However, this overview shows the process and the project. It’s really important to understand the process and have a clear idea of what you want to create. So, the task of creating the application can be more enjoyable. Creating this project was a great learning experience. And I hope someone else can benefit from reading this blog. My full project can be found here: [https://github.com/stef-codes/enquote](https://github.com/stef-codes/enquote).



